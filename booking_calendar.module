<?php
/**
 * @file
 * A description of what your module does.
 */
//  drupal_add_js(libraries_get_path('node_modules') . '/@angular/forms/bundles/forms.umd.js');

function booking_calendar_init() {
  drupal_add_css('https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css');
  drupal_add_css('https://fonts.googleapis.com/icon?family=Material+Icons');
}

/**
 * Implements hook_permission().
 */
function booking_calendar_permission() {
  return [
    'access booking calendar' => [
      'title' => t('Access content for the Booking Calendar'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function booking_calendar_menu() {
  $items['booking-calendar'] = [
    'access callback' => TRUE,
    'page callback' => 'booking_calendar_callback',
  ];
  $items['booking-calendar/update-events-multiple'] = [
    'page callback' => 'booking_calendar_update_multuple_ajax_callback',
    'page arguments' => [2],
    'access arguments' => ['access booking calendar'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
  $items['booking-calendar/edit/%'] = [
    'page callback' => 'booking_calendar_edit_ajax_callback',
    'page arguments' => [2],
    'access arguments' => ['access booking calendar'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',

  ];
  $items['booking-calendar/additional-options'] = [
    'page callback' => 'booking_calendar_get_additional_fields_ajax_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output'
  ];
  $items['booking-calendar/create'] = [
    'page callback' => 'booking_calendar_create_ajax_callback',
    'page arguments' => [TRUE],
    'access arguments' => ['access booking calendar'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',

  ];
  $items['booking-calendar/%/%/%/%'] = [
    'page callback' => 'booking_calendar_item_list_ajax_callback',
    'page arguments' => [1, 2, 3, 4],
    'access arguments' => ['access booking calendar'],
    //    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];

  $items['booking-calendar/venue'] = [
    'page callback' => 'booking_calendar_venue_list_ajax_callback',
    'page arguments' => [TRUE],
    'access arguments' => ['access booking calendar'],
    'type' => MENU_CALLBACK,
    //    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
  ];

  $items['booking-calendar/egroup/groups-list'] = [
    'page callback' => 'booking_calendar_lft_event_group_groups_list_ajax_callback',
    //    'access arguments' => ['access booking calendar'],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];

  return $items;
}

/**
 * @return array
 */
function booking_calendar_create_ajax_callback() {
  global $user;
  $cp = commerce_product_new('ticket');

  $req = json_decode(file_get_contents("php://input"), true);
  $cp->uid = $user->uid;
  $cp = prepare_commerce_product($cp, $req);
  $saved_ticket = commerce_product_save($cp);
  return [
    'status' => 'success',
    'data' => $cp
  ];
}

function booking_calendar_lft_event_group_groups_list_ajax_callback() {
  $query = db_select('lft_event_group_entity', 'eg');
  $query->fields('eg', ['gid', 'title']);
  $result = $query->execute()->fetchAll();
  return [
    'status' => 'success',
    'data' => $result
  ];
}

function generate_random_filename() {
  return uniqid(rand(), true);
}

function prepare_commerce_product($cp, $req) {
  /*
        modifiedEvent.supportingPerformers = event['field_supporting_performers'] &&
          event['field_supporting_performers']['und'] || [];
}
[] */
  if(!empty($req['poster']['data'])) {
    $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $req['poster']['data']));
    $filename = generate_random_filename();
    $file_uri = 'public://'. $filename . '.' . $req['poster']['extension'];
    $file = file_save_data($data, $file_uri, FILE_EXISTS_REPLACE);
    $cp->field_poster['und'][0] = array(
      'fid'=>$file->fid,
      'uri'=>$file->uri,
      'filename'=>$file->filename,
      'alt' => $file->filename,
      'filemime'=>$file->filemime,
      'uid' => $file->uid,
      'status'=> $file->status,
      'timestamp'=> $file->timestamp,
      'filesize'=>$file->filesize
    );
  }
  if(!empty($req['rider']['data'])) {
    $data = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $req['rider']['data']));
    $filename = generate_random_filename();
    $file = file_save_data($data, 'public://'. $filename . '.' . $req['rider']['extension'], FILE_EXISTS_REPLACE);
    $cp->field_booking_documents['und'][0] = array(
      'fid'=>$file->fid,
      'uri'=>$file->uri,
      'filename'=>$file->filename,
      'alt' => $file->filename,
      'filemime'=>$file->filemime,
      'uid'=> $file->uid,
      'status'=> $file->status,
      'timestamp'=> $file->timestamp,
      'filesize'=>$file->filesize
    );
  }
  $performers = array();
  foreach($req['supportingPerformers'] as $key => $value) {
    $performer = new stdClass();
    $performer->value = $value['value'];
    array_push($performers, $performer);
  }
  $req['field_supporting_performers']['und'] = $performers;
  if(!empty($req['genreType'])) {
    $cp->field_type['und'][0]['tid'] = $req['genreType'];
  }
  if(!empty($req['festival'])) {
    $cp->field_special_event_taxonomy['und'][0]['tid'] = $req['festival'];
  }
  if(!empty($req['specialPricing'])) {
    $cp->field_special_pricing['und'][0]['tid'] = $req['specialPricing'];
  }
  $cp->field_tech_arrival['und'][0]['value'] = $req['techArrival'];
  $cp->field_hold_order['und'][0]['value'] = $req['priority'];
  $cp->field_media_link_oembed['und'][0]['url'] = $req['mediaLink'];
  $cp->field_link_description['und'][0]['url'] = $req['externalLinkDescription'];
  $cp->field_facebook_event_link['und'][0]['url'] = $req['fbEventLink'];
  $cp->field_tech_rider['und'][0]['value'] = $req['techNotes'];
  $cp->field_description['und'][0]['value'] = $req['description'];
  $cp->field_media_embed_code['und'][0]['value'] = $req['mediaCode'];
  $cp->field_band_financials['und'][0]['value'] = $req['moneyOwed'];
  $cp->commerce_stock['und'][0]['value'] = $req['numberOfTicketsForSale'];
  $cp->field_promoter_email['und'][0]['email'] = $req['willCallEmailRecipient'];
  $cp->field_door_price['und'][0]['value'] = $req['doorPrice'];
  $cp->commerce_price['und'][0] = array(
    'amount' => $req['price'],
    'currency_code' => 'CAD'
  );
  if(is_bool($req['isTicketOffline'])) {
    $cp->field_ticket_offline_online['und'][0]['value'] = $req['isTicketOffline'] ? 1 : 0;
  }
  $date = $req['expirationDate'] ? new DateTime($req['expirationDate']) : new DateTime();
  $cp->field_expiration_date['und'][0] = array(
    'value' => $date->format('Y-m-d H:i:s'),
    'timezone' => $date->getTimezone(),
    'timezone_db' => $date->getTimezone(),
  );
  $date = is_null($req['liveDate']) ? new DateTime() : new DateTime($req['liveDate']);
  $cp->field_live_date_auto['und'][0] = array(
    'value' => $date->format('Y-m-d H:i:s'),
    'timezone' => $date->getTimezone(),
    'timezone_db' => $date->getTimezone(),
  );

  $cp->field_ticket_hold_status['und'][0]['value'] = $req['ticketStatus'];
  $date = new DateTime($req['start']);
  $cp->field_date['und'][0] = array(
    'value' => $date->format('Y-m-d H:i:s'),
    'timezone' => $date->getTimezone(),
    'timezone_db' => $date->getTimezone(),
  );
  $cp->field_day_night['und'][0]['value'] = $req['isDaytime'] ? '1' : '0';
  $cp->title = $req['title'];
  $cp->field_venue['und'][0]['tid'] = $req['venue'];
  $cp->field_duration['und'][0]['value'] = $req['duration'];
  $cp->field_company['und'][0]['tid'] = $req['promoter'];
  $cp->price = 0;
  return $cp;
}

function booking_calendar_get_additional_fields_ajax_callback() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('special_event_category');
  $festivals = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);
  $vocabulary = taxonomy_vocabulary_machine_name_load('special_pricing_options');
  $special_pricing = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);
  $vocabulary = taxonomy_vocabulary_machine_name_load('type');
  $genre_type = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);
  return [
    'status' => 'success',
    'festivals' => $festivals,
    'special_pricing' => $special_pricing,
    'genre_type' => $genre_type
  ];
}


/**
 * @return array
 */
function booking_calendar_venue_list_ajax_callback() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('Venue');
  $terms = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);
  $company = taxonomy_vocabulary_machine_name_load('Company');
  $companies = entity_load('taxonomy_term', FALSE, ['vid' => $company->vid]);

  if (!empty($terms)) {
    $output = [
      'venues' => $terms,
      'companies' => $companies
    ];
  }
  else {
    $output = [
      'status' => 'error',
    ];
  }
  return $output;
}

/**
 * @param $productId
 *
 * @return array
 */
function booking_calendar_edit_ajax_callback($productId) {
  $cp = commerce_product_load($productId);
  $req = json_decode(file_get_contents("php://input"), true);
  if(is_null($cp) || is_null($req)) {
    return [
      'status' => 'error',
    ];
  }
  $cp = prepare_commerce_product($cp, $req);
  try {
    commerce_product_save($cp);
  } catch (Exception $e) {
    return [
      'status' => 'error',
      'data' => $e
    ];
  }
  return [
    'status' => 'success',
    'data' => $cp
  ];
}

function booking_calendar_update_multuple_ajax_callback() {
  $req = json_decode(file_get_contents("php://input"), true);

  foreach ($req['events'] as $key => $value) {
    $product = commerce_product_load($value);
    $product->field_ticket_status['und'][0]['value'] = $req['status'];
    commerce_product_save($product);
  }

  return [
    'status' => 'success',
  ];
}

/**
 * @return array
 */
function booking_calendar_callback() {
  $build = [];
  drupal_add_js(['booking_calendar' => '222222222222'], 'setting');


  $build['content'] = [
    '#theme' => [
      'booking_calendar_component',
    ],
    '#attached' => [
      'js' => [
        drupal_get_path('module', 'booking_calendar') . '/booking-calendar-frontend/dist/inline.bundle.js',
        drupal_get_path('module', 'booking_calendar') . '/booking-calendar-frontend/dist/polyfills.bundle.js',
        drupal_get_path('module', 'booking_calendar') . '/booking-calendar-frontend/dist/styles.bundle.js',
        drupal_get_path('module', 'booking_calendar') . '/booking-calendar-frontend/dist/vendor.bundle.js',
        drupal_get_path('module', 'booking_calendar') . '/booking-calendar-frontend/dist/main.bundle.js',
      ],
    ],
  ];
  return $build;
}

/**
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function booking_calendar_theme($existing, $type, $theme, $path) {
  return [
    'booking_calendar_component' => [
      'template' => 'booking-calendar-component',
      'variables' => [],
      'path' => drupal_get_path('module', 'booking_calendar') . '/theme',
    ],
  ];
}

function booking_calendar_item_list_ajax_callback($interval, $day, $month, $year) {
  $linuxDate = date('U', mktime(0, 0, 0, $month, $day, $year));
  $between = _get_event_interval($interval, $linuxDate);
  $pidArray = [];

  $query = db_select('commerce_product', 'p');
  $query->innerJoin('field_data_field_date', 'f', 'f.entity_id = p.product_id');
  $query->fields('p', ['product_id', 'status', 'title']);
  $query->fields('f', ['field_date_value']);
  $query->conditions('p.type', 'ticket');
  $query->condition('f.field_date_value', $between, 'BETWEEN');
  $result = $query->execute();

  $products = $result->fetchAll();

  foreach ($products as $product) {
    $pidArray[] += $product->product_id;
  }
  $products = commerce_product_load_multiple($pidArray);
  $results = [];
  foreach($products as $key => $value) {
    $product = new stdClass();
    $product = $value;
    $product->posterURL = $product->field_poster['und'][0]['uri'] ? file_create_url($product->field_poster['und'][0]['uri']) : '';
    array_push($results, $product);
  }
  return $results;
}

/**
 * @param $interval
 * @param $linuxDate
 *
 * @return array
 */
function _get_event_interval($interval, $linuxDate) {

  $startTime = date('Y-m-d H:i:s');
  $stopTime = date('Y-m-d H:i:s');

  switch ($interval) {

    case 'month':

      $startTime = date('Y-m-d H:i:s', strtotime("first day of " . date('F', $linuxDate) . " " . date('Y', $linuxDate)));
      $last_day = date("U", strtotime("last day of " . date('F', $linuxDate) . " " . date('Y', $linuxDate)));
      $linuxTime_lastTime = mktime(23, 59, 59, date('n', $last_day), date('j', $last_day), date('Y', $last_day));
      $stopTime = date('Y-m-d H:i:s', $linuxTime_lastTime);

      break;

    case 'week':

      $startTime = date('Y-m-d H:i:s', strtotime("Monday this week", $linuxDate));
      $last_day = date("U", strtotime("Sunday this week", $linuxDate));
      $linuxTime_lastTime = mktime(23, 59, 59, date('n', $last_day), date('j', $last_day), date('Y', $last_day));
      $stopTime = date('Y-m-d H:i:s', $linuxTime_lastTime);

      break;

    case 'day':
      $startTime = date('Y-m-d H:i:s', $linuxDate);
      $linuxTime_lastTime = mktime(23, 59, 59, date('n', $linuxDate), date('j', $linuxDate), date('Y', $linuxDate));
      $stopTime = date('Y-m-d H:i:s', $linuxTime_lastTime);

      break;
  };

  $output = [$startTime, $stopTime];
  return $output;
}
